/*
 * Copyright (c) 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2017 NXP
 * All rights reserved.
 * 
 * SPDX-License-Identifier: BSD-3-Clause
 */
#include "fsl_debug_console.h"
#include "board.h"
#include "fsl_usart.h"
#include "fsl_sctimer.h"
#include "fsl_gpio.h"
#include "pin_mux.h"
#include <stdbool.h>
/*******************************************************************************
 * Definitions
 ******************************************************************************/
#define ROBO_USART USART2
#define ROBO_USART_CLK_SRC kCLOCK_Flexcomm2
#define ROBO_USART_CLK_FREQ CLOCK_GetFreq(kCLOCK_Flexcomm2)
#define SCTIMER_CLK_FREQ CLOCK_GetFreq(kCLOCK_BusClk)
#define ROBO_FIRST_SCTIMER_OUT kSCTIMER_Out_4
#define ROBO_SECOND_SCTIMER_OUT kSCTIMER_Out_5
#define ROBO_THIRD_SCTIMER_OUT	kSCTIMER_Out_7
#define ROBO_FOURTH_SCTIMER_OUT	kSCTIMER_Out_2
 sctimer_config_t sctimerInfo;
 sctimer_pwm_signal_param_t pwmParam;
 uint32_t task1,task2,task3,task4,speed=65;
 uint32_t sctimerClock;

/*******************************************************************************
 * Prototypes
 ******************************************************************************/

/*******************************************************************************
 * Variables
 ******************************************************************************/

uint8_t txbuff[] = "Usart polling example\r\nBoard will send back received characters\r\n";
//uint8_t rxbuff[20] = {0};

/*******************************************************************************
 * Code
 ******************************************************************************/
/*!
 * @brief Main function
 */
int main(void)
{
    uint8_t ch;
    usart_config_t config;



   sctimer_config_t sctimerInfo;
   sctimer_pwm_signal_param_t pwmParam;


   uint32_t task1,task2,task3,task4,speed=68;
   uint32_t sctimerClock;

    /* attach 12 MHz clock to FLEXCOMM0 (debug console) */
    CLOCK_AttachClk( BOARD_DEBUG_UART_CLK_ATTACH_CORE1);

    /* reset FLEXCOMM for USART */
    RESET_PeripheralReset( kFC0_RST_SHIFT_RSTn);
    CLOCK_EnableClock(kCLOCK_Gpio0);
    CLOCK_EnableClock(kCLOCK_Gpio1);
    BOARD_InitPins();
    BOARD_BootClockFROHF48M();
    BOARD_InitDebugConsole();
    /*
     * config.baudRate_Bps = 115200U;
     * config.parityMode = kUSART_ParityDisabled;
     * config.stopBitCount = kUSART_OneStopBit;
     * config.loopback = false;
     * config.enableTx = false;
     * config.enableRx = false;
     */
    USART_GetDefaultConfig(&config);
    config.baudRate_Bps = 115200;
    config.enableTx = true;
    config.enableRx = true;
    USART_Init(ROBO_USART, &config, ROBO_USART_CLK_FREQ);

    sctimerClock = SCTIMER_CLK_FREQ;
    SCTIMER_GetDefaultConfig(&sctimerInfo);
    /* Initialize SCTimer module */
    SCTIMER_Init(SCT0, &sctimerInfo);



    pwmParam.output = ROBO_FIRST_SCTIMER_OUT;
    pwmParam.level = kSCTIMER_HighTrue;
    pwmParam.dutyCyclePercent = 1;
    if (SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_EdgeAlignedPwm , 2400U, sctimerClock, &task1) == kStatus_Fail)
    {
           return -1;
    }

    pwmParam.output = ROBO_SECOND_SCTIMER_OUT;
    pwmParam.level = kSCTIMER_HighTrue;
       	pwmParam.dutyCyclePercent =2 ;
       	if (SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_EdgeAlignedPwm , 2400U, sctimerClock, &task2) == kStatus_Fail)
       	{
       	       return -1;
       	}
       	pwmParam.output = ROBO_THIRD_SCTIMER_OUT;
        pwmParam.level = kSCTIMER_HighTrue;
        pwmParam.dutyCyclePercent = 1;
        if (SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_EdgeAlignedPwm , 2400U, sctimerClock, &task3) == kStatus_Fail)
        {
              return -1;
        }

        pwmParam.output = ROBO_FOURTH_SCTIMER_OUT;
        pwmParam.level = kSCTIMER_HighTrue;
        pwmParam.dutyCyclePercent =2 ;
        if (SCTIMER_SetupPwm(SCT0, &pwmParam, kSCTIMER_EdgeAlignedPwm , 2400U, sctimerClock, &task4) == kStatus_Fail)
        {
                 return -1;
        }

    //USART_WriteBlocking(ROBO_USART, txbuff, sizeof(txbuff) - 1);

    while (1)
    {
        USART_ReadBlocking(ROBO_USART, &ch, 1);

        if(ch == 'r')
        {
        printf("right\n");
          SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_FIRST_SCTIMER_OUT, speed, task1);
          SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_SECOND_SCTIMER_OUT,1, task2);
          SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_THIRD_SCTIMER_OUT, 1, task3);
          SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_FOURTH_SCTIMER_OUT,1, task4);

        }
       if(ch == 'l')
        {
        printf("left\n");
      SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_FIRST_SCTIMER_OUT, 1, task1);
      SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_SECOND_SCTIMER_OUT, 1, task2);
      SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_THIRD_SCTIMER_OUT, speed, task3);
      SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_FOURTH_SCTIMER_OUT, 1, task4);
        }
        if(ch == 'f')
        {
        printf("go straight\n");
        SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_FIRST_SCTIMER_OUT,speed, task1);
        SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_SECOND_SCTIMER_OUT,1, task2);
             SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_THIRD_SCTIMER_OUT,speed, task3);
        SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_FOURTH_SCTIMER_OUT,1, task4);
        }
        if(ch == 'p')
        {
        printf("stop");
        SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_FIRST_SCTIMER_OUT, 1, task1);
        SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_SECOND_SCTIMER_OUT, 1, task2);
        SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_THIRD_SCTIMER_OUT, 1, task3);
        SCTIMER_UpdatePwmDutycycle(SCT0,ROBO_FOURTH_SCTIMER_OUT, 1, task4);

        }
    }
}
